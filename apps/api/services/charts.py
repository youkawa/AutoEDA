"""Lightweight chart generation service (MVP).

Generates a simple Vega-Lite-like SVG for preview without executing arbitrary code.
Stores job results under data/charts/<job_id>/result.json for traceability.
"""
from __future__ import annotations

import json
from pathlib import Path
from typing import Any, Dict, List, Optional
from uuid import uuid4

_DATA_DIR = Path("data/charts")
_JOBS: Dict[str, Dict[str, Any]] = {}
_BATCHES: Dict[str, Dict[str, Any]] = {}


def _ensure_dir() -> None:
    _DATA_DIR.mkdir(parents=True, exist_ok=True)


def _svg_bar(title: str = "Bar Chart") -> str:
    # Very simple static SVG bar preview (no data binding)
    bars = "".join(
        f'<rect x="{20 + i*30}" y="{100 - h}" width="20" height="{h}" fill="#60a5fa" />'
        for i, h in enumerate([20, 60, 100, 50, 80])
    )
    return (
        f'<svg xmlns="http://www.w3.org/2000/svg" width="360" height="120" viewBox="0 0 360 120">'
        f'<text x="10" y="16" font-size="12" fill="#0f172a">{title}</text>'
        f'<line x1="10" y1="100" x2="350" y2="100" stroke="#94a3b8" stroke-width="1" />'
        f'{bars}'
        f'</svg>'
    )


def _svg_line(title: str = "Line Chart") -> str:
    points = [(20, 90), (60, 60), (100, 70), (140, 40), (180, 55), (220, 30), (260, 35), (300, 25)]
    path_d = "M " + " L ".join(f"{x} {y}" for x, y in points)
    circles = "".join(f'<circle cx="{x}" cy="{y}" r="3" fill="#34d399" />' for x, y in points)
    return (
        f'<svg xmlns="http://www.w3.org/2000/svg" width="360" height="120" viewBox="0 0 360 120">'
        f'<text x="10" y="16" font-size="12" fill="#0f172a">{title}</text>'
        f'<path d="{path_d}" fill="none" stroke="#34d399" stroke-width="2" />'
        f'{circles}'
        f'</svg>'
    )


def _svg_scatter(title: str = "Scatter Plot") -> str:
    pts = [(20, 80), (50, 60), (80, 70), (110, 40), (140, 55), (170, 65), (200, 45), (230, 35), (260, 75)]
    circles = "".join(f'<circle cx="{x}" cy="{y}" r="3" fill="#f97316" />' for x, y in pts)
    return (
        f'<svg xmlns="http://www.w3.org/2000/svg" width="360" height="120" viewBox="0 0 360 120">'
        f'<text x="10" y="16" font-size="12" fill="#0f172a">{title}</text>'
        f'{circles}'
        f'</svg>'
    )


def _template_result(spec_hint: Optional[str]) -> Dict[str, Any]:
    kind = (spec_hint or "bar").lower()
    if kind == "line":
        svg = _svg_line("Line (template)")
    elif kind == "scatter":
        svg = _svg_scatter("Scatter (template)")
    else:
        svg = _svg_bar("Bar (template)")
    return {
        "language": "python",
        "library": "vega",
        "code": "# generated by template (MVP)",
        "outputs": [
            {"type": "image", "mime": "image/svg+xml", "content": svg},
        ],
    }


def generate(item: Dict[str, Any]) -> Dict[str, Any]:
    """Generate a chart result synchronously (MVP)."""
    _ensure_dir()
    job_id = uuid4().hex[:12]
    result = _template_result(item.get("spec_hint"))
    job = {"job_id": job_id, "status": "succeeded", "result": result}
    _JOBS[job_id] = job
    outdir = _DATA_DIR / job_id
    outdir.mkdir(parents=True, exist_ok=True)
    (outdir / "result.json").write_text(json.dumps(job, ensure_ascii=False, indent=2), encoding="utf-8")
    return job


def get_job(job_id: str) -> Optional[Dict[str, Any]]:
    return _JOBS.get(job_id)


def generate_batch(items: List[Dict[str, Any]], parallelism: int = 3) -> Dict[str, Any]:
    # MVP: synchronous loop; parallelism is accepted but not used
    batch_id = uuid4().hex[:12]
    results: List[Dict[str, Any]] = []
    job_items: List[Dict[str, Any]] = []
    for it in items:
        job = generate(it)
        results.append(job.get("result"))
        job_items.append({"job_id": job["job_id"], "status": job["status"]})
    status = {
        "batch_id": batch_id,
        "total": len(items),
        "done": len(items),
        "running": 0,
        "failed": 0,
        "items": job_items,
        "results": results,
    }
    _BATCHES[batch_id] = status
    return status


def get_batch(batch_id: str) -> Optional[Dict[str, Any]]:
    return _BATCHES.get(batch_id)

